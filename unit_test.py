# import phys_to_dram
BK_SHIFT = 28
ROW_SHIFT = 0
COL_SHIFT = 16

BK_MASK = int("111111", 2)
ROW_MASK = int("1111111111111111", 2)
COL_MASK = int("111111111111", 2)

def get_parity(a):
    result = 0
    while(a):
        # print(bin(a), result)
        if (a & 1):
            result ^= 1
        a = a >> 1
    return result

# int h_lsb_bits[6] = {19, 13, 17, 14, 15, 16};
            # 0b0000000000000010111110000000000000
def phys_2_dram(phys):
    DRAM_MTX = [
  # 0b9876543210987654321098765432109876543210,
          0b0000000000000010000001000100000000, # 8
          0b0000000000000011000011001000000000, # 9
          0b0001000100010000100000000000000000, # 17
          0b0010001000100001000100000000000000, # 14
          0b0100010001000100001000000000000000, # 15
          0b1000100010001000010000000000000000, # 16
          0b0000000000000000000010000000000000, 
          0b0000000000000000000001000000000000, 
          0b0000000000000000000000100000000000, 
          0b0000000000000000000000010000000000, 
          0b0000000000000000000000000010000000, 
          0b0000000000000000000000000001000000, 
          0b0000000000000000000000000000100000, 
          0b0000000000000000000000000000010000, 
          0b0000000000000000000000000000001000, 
          0b0000000000000000000000000000000100, 
          0b0000000000000000000000000000000010, 
          0b0000000000000000000000000000000001, 
          0b1000000000000000000000000000000000, 
          0b0100000000000000000000000000000000, 
          0b0010000000000000000000000000000000, 
          0b0001000000000000000000000000000000, 
          0b0000100000000000000000000000000000, 
          0b0000010000000000000000000000000000, 
          0b0000001000000000000000000000000000, 
          0b0000000100000000000000000000000000, 
          0b0000000010000000000000000000000000, 
          0b0000000001000000000000000000000000, 
          0b0000000000100000000000000000000000, 
          0b0000000000010000000000000000000000, 
          0b0000000000001000000000000000000000, 
          0b0000000000000100000000000000000000, 
          0b0000000000000010000000000000000000, 
          0b0000000000000001000000000000000000, 
    ]
    phys_addr = phys
    res = 0
    for i in DRAM_MTX:
        res = res << 1
        res |= get_parity(phys_addr & i)

    bank = (res >> BK_SHIFT) & BK_MASK
    row = (res >> ROW_SHIFT) & ROW_MASK
    col = (res >> COL_SHIFT) & COL_MASK


    # bank, row, col = list(map(int, sys.argv[1].split('_')))
    return (f'{bank}_{row}_{col}')
 
def dram_2_phys(dram_addr):
    bank, row, col = dram_addr.split('_')
    ADDR_MTX = [
    #     BBBBBBCCCCCCCCCCCCRRRRRRRRRRRRRRRR | B6 C12 R16
# 0b9876543210987654321098765432109876543210,
        0b0000000000000000001000000000000000,
        0b0000000000000000000100000000000000,
        0b0000000000000000000010000000000000,
        0b0000000000000000000001000000000000,
        0b0000000000000000000000100000000000,
        0b0000000000000000000000010000000000,
        0b0000000000000000000000001000000000,
        0b0000000000000000000000000100000000,
        0b0000000000000000000000000010000000,
        0b0000000000000000000000000001000000,
        0b0000000000000000000000000000100000,
        0b0000000000000000000000000000010000,
        0b0000000000000000000000000000001000,
        0b0000000000000000000000000000000100,
        0b0000000000000000000000000000000010,
        0b0000000000000000000000000000000001,
        0b0010000000000000000001000100010000, #
        0b0000010000000000001000100010001000, #
        0b0000100000000000000100010001000100, #
        0b0001000000000000000010001000100001, #
        0b0000001000000000000000000000000000,
        0b0000000100000000000000000000000000,
        0b0000000010000000000000000000000000,
        0b0000000001000000000000000000000000,
        0b0100001100000000000000000000000011, #
        0b1000000100000000000000000000000010, #
        0b0000000000100000000000000000000000,
        0b0000000000010000000000000000000000,
        0b0000000000001000000000000000000000,
        0b0000000000000100000000000000000000,
        0b0000000000000010000000000000000000,
        0b0000000000000001000000000000000000,
        0b0000000000000000100000000000000000,
        0b0000000000000000010000000000000000,

    ]
    
    l = (int(bank) << BK_SHIFT) | (int(row) << ROW_SHIFT) | (int(col) << COL_SHIFT)
    # print("l: ", hex(l))
    res = 0
    for i in ADDR_MTX:
        res = res << 1
        res |= get_parity(l & i)

    return hex(res)


test_dram_addr_pool = []


# manual insert
# test_dram_addr_pool.append("54_28180_1024")


for bank in range(0, BK_MASK + 1):
    for row in range(0, ROW_MASK + 1):
        test_dram_addr_pool.append(f"{bank}_{row}_{(bank + row) % (COL_MASK + 1)}")



for dram_addr in test_dram_addr_pool:
    phys_addr = dram_2_phys(dram_addr)
    # print(phys_addr)
    # print(phys_2_dram(int(phys_addr, 16)))
    # print(dram_2_phys(phys_2_dram(int(phys_addr, 16))))
    assert(phys_2_dram(int(phys_addr, 16)) == dram_addr), f"{dram_addr}, {phys_2_dram(int(phys_addr, 16))}, {(phys_addr)}"
