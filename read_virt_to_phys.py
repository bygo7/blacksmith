import sys


BK_SHIFT = 24
ROW_SHIFT = 0
COL_SHIFT = 12

BK_MASK = int("111111", 2)
ROW_MASK = int("111111111111", 2)
COL_MASK = int("111111111111", 2)
# print(BK_MASK, ROW_MASK, COL_MASK)
# virt_addr = int(sys.argv[1][2:], 16)

# virt_addr = 12345
DRAM_MTX = [
          0b000000000010000001000100000000,
          0b000000000011000011001000000000,
          0b000100010000100000000000000000,
          0b001000100001000100000000000000,
          0b010001000100001000000000000000,
          0b100010001000010000000000000000,
          0b000000000000000000100000000000, 
          0b000000000000000000010000000000, 
          0b000000000000000000001000000000, 
          0b000000000000000000000100000000, 
          0b000000000000000000000010000000, 
          0b000000000000000000000001000000, 
          0b000000000000000000000000100000, 
          0b000000000000000000000000010000, 
          0b000000000000000000000000001000, 
          0b000000000000000000000000000100, 
          0b000000000000000000000000000010, 
          0b000000000000000000000000000001, 
          0b100000000000000000000000000000, 
          0b010000000000000000000000000000, 
          0b001000000000000000000000000000, 
          0b000100000000000000000000000000, 
          0b000010000000000000000000000000, 
          0b000001000000000000000000000000, 
          0b000000100000000000000000000000, 
          0b000000010000000000000000000000, 
          0b000000001000000000000000000000, 
          0b000000000100000000000000000000, 
          0b000000000010000000000000000000, 
          0b000000000001000000000000000000, 
    ]


def get_parity(a):
    result = 0
    while(a):
        # print(bin(a), result)
        if (a & 1):
            result ^= 1
        a = a >> 1
    return result

readfile = "./error_log_65535_5_pAddr"
writefile = readfile + "_phys"
f = open(readfile)
fw = open(writefile, 'w')
for line in f:
    wstring = ""
    for vaddr in line.split(','):
        if vaddr == '\n':
            continue
        print(vaddr)
        res = 0      
        for i in DRAM_MTX:
            res = res << 1
            res |= get_parity(int(vaddr, 16) & i)

        bank = (res >> BK_SHIFT) & BK_MASK
        row = (res >> ROW_SHIFT) & ROW_MASK
        col = (res >> COL_SHIFT) & COL_MASK

        wstring = wstring + (f'{bank}_{row}_{col},')
    fw.write(wstring + "\n")

f.close()
fw.close()
# res = 0      
# for i in DRAM_MTX:
#     res = res << 1
#     res |= get_parity(virt_addr & i)

# bank = (res >> BK_SHIFT) & BK_MASK
# row = (res >> ROW_SHIFT) & ROW_MASK
# col = (res >> COL_SHIFT) & COL_MASK


# # bank, row, col = list(map(int, sys.argv[1].split('_')))
# print(f'{bank}_{row}_{col}')

# ADDR_MTX = [
        
#     0b000000000000000000100000000000,
#     0b000000000000000000010000000000,
#     0b000000000000000000001000000000,
#     0b000000000000000000000100000000,
#     0b000000000000000000000010000000,
#     0b000000000000000000000001000000,
#     0b000000000000000000000000100000,
#     0b000000000000000000000000010000,
#     0b000000000000000000000000001000,
#     0b000000000000000000000000000100,
#     0b000000000000000000000000000010,
#     0b000000000000000000000000000001, 
#     0b001000000000000000000100010000, #5
#     0b000001000000000000100010001000, #4 ?
#     0b000010000000000000010001000100, #3
#     0b000100000000000000001000100001, #2
#     0b110000001000000000000000000001, #1
#     0b100000001100000000000000000010, #0 
#     0b000000100000000000000000000000,
#     0b000000010000000000000000000000,
#     0b000000001000000000000000000000,
#     0b000000000100000000000000000000,
#     0b000000000010000000000000000000,
#     0b000000000001000000000000000000,
#     0b000000000000100000000000000000,
#     0b000000000000010000000000000000,
#     0b000000000000001000000000000000,
#     0b000000000000000100000000000000,
#     0b000000000000000010000000000000,
#     0b000000000000000001000000000000,
#     ]
# l = (bank << BK_SHIFT) | (row << ROW_SHIFT) | (col << COL_SHIFT)
# print(f"l: {bin(l)}, {hex(l)} ")
# res = 0
# for i in ADDR_MTX:
#     res = res << 1
#     res |= get_parity(l & i)
# print(f'{bin(res)}, {hex(res)}')



# virt_addr = res
# for i in DRAM_MTX:
#     res = res << 1
#     res |= get_parity(virt_addr & i)

# bank = (res >> BK_SHIFT) & BK_MASK
# row = (res >> ROW_SHIFT) & ROW_MASK
# col = (res >> COL_SHIFT) & COL_MASK


# print(f'{bank}_{row}_{col}')
# l = (bank << BK_SHIFT) | (row << ROW_SHIFT) | (col << COL_SHIFT)

# res = 0
# for i in ADDR_MTX:
#     res = res << 1
#     res |= get_parity(l & i)
# print(f'{bin(res)}, {hex(res)}')


# # 0b000001000000000000100000000000,
# # 0b000010000000000000010000000000,
# # 0b000100000000000000001000000000,
# # 0b001000000000000000000100000000,
# # 0b000001000000000000000010000000,
# # 0b000010000000000000000001000000,
# # 0b000100000000000000000000100000,
# # 0b001000000000000000000000010000,
# # 0b000001000000000000000000001000,
# # 0b000010000000000000000000000100,
# # 0b110000000000000000000000000010,
# # 0b010100000000000000000000000001,
# # 0b001000000000000000000000000000,
# # 0b000001000000000000100010001000,
# # 0b000010000000000000000000000000,
# # 0b000100000000000000000000000000,
# # 0b010000000000000000000000000000,
# # 0b110000000000000000000000000000,
# # 0b000000100000000000000000000000,
# # 0b000000010000000000000000000000,
# # 0b010000001000000000000000000000,
# # 0b100000000100000000000000000000,
# # 0b000000000010000000000000000000,
# # 0b000000000001000000000000000000,
# # 0b000000000000100000000000000000,
# # 0b000000000000010000000000000000,
# # 0b000000000000001000000000000000,
# # 0b000000000000000100000000000000,
# # 0b000000000000000010000000000000,
# # 0b000000000000000001000000000000,
